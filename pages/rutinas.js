import Head from "next/head";
import { useRouter } from "next/router";
import { useState, useEffect, useCallback } from "react";
import Navbar from "./Componentes/Navbar";
import Footer from "./Componentes/Footer";
import supabase from "../config/supabaseClient";

export default function Home() {
  const router = useRouter();
  let musculoIndex = router.query.name;
  (musculoIndex ? "" : musculoIndex = "Todos")

  if (!musculoIndex) {
    musculoIndex = "Todos"
  }

  const [sesion, setSesion] = useState(null);
  const [paginacion, setPaginacion] = useState(1);
  const [rutinas, setRutinas] = useState(null);
  const [cantidad, setCantidad] = useState(null);
  const [formInput, setFormInput] = useState({musculo: musculoIndex});
  const [equipo, setEquipo] = useState(["Ninguno","Banda de resistencia","Banda de suspension","Barra","Barra Z","Barras (dominadas, paralelas)","Mancuerna","Mancuernas","Pesa rusa","Placa de peso","Maquinas en GYM","Banco plano","Banco declinado","Banco inclinado","Cuerda"]);
  
  useEffect(() => {
    handleSesion()
    localStorage.removeItem("NombrePaquete");
    localStorage.removeItem("Meses");
  }, [])

  const handleSesion = async () => {

    const { data, error } = await supabase.auth.getSession()

    if(data.session){
      setSesion(data.session);
      getRutinas(data.session);
      //console.log(data);
    } 
    else {
      setSesion(null);
      //console.log("No hay SesiÃ³n " + error);
      router.push('/login')
    }
  }

  const nuevaRutina = async () => {
    let query = supabase
    .from('rutinas')
    .select('nombre', { count: 'exact', head: true })
    .eq('usuario', sesion.user.id)

    const count = await query
    //console.log(count);

    const { data, error } = await supabase
      .from('rutinas')
      .insert({
        usuario: sesion.user.id, 
        nombre: "Nueva rutina " + (count.count + 1)
        })
      .select()

    if (error) {
      console.log(error)
      console.log("ERROR: Hubo un error al crear una nueva rutina.")
    }
    else{
      //console.log(data);
      //console.log("Se creÃ³ una nueva rutina.")
      router.push({
        pathname: '/editarRutina',
        query: { rutina: data[0].id }
      })
    }
  }

  async function getRutinas(session) {
    const { data, error } = await supabase
    .from('rutinas')
    .select('*')
    .eq('usuario', session.user.id)

    if (error) {
      console.log('ERROR: Hubo un error al recuperar la rutina.')
      console.log(error)
    }
    else{
      console.log(data);
      setRutinas(data);
    }
  }

  function incluye(arreglo, buscar) {
    if (arreglo != undefined){
      var encontrado = false;
      var arreglo_temp = Array.from(arreglo);

      for (let i = 0; i < arreglo_temp.length; i++) {
        if (arreglo_temp[i] == buscar){
          encontrado = true;
          break;
        }
      }  
      return encontrado;
    }
    else{
      return false;
    }
  }

  return (
    <div className="bg-stone-100 w-full" data-theme="emerald">
      <Head>
        <title>EvoltFit</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Navbar />

      <main>
        <br />
        <br />
        <br />
        <br />
        <br />
        
        <div>          
          {
            rutinas ? 
            <div className="mx-auto mt-6">
              <div className="flex flex-col w-9/12 mx-auto">
                <h2 className="text-2xl text-secondary">{"Rutinas de " + sesion.user.user_metadata.nombre}</h2>
                { rutinas.length === 0 ? 
                    <h2>{'Ups, aquÃ­ no hay rutinas. ðŸ¥µ'}</h2>
                  :
                    (rutinas.map((rutina) => (
                      <div key={rutina.id} className="w-full p-6 bg-white border border-gray-200 rounded-lg shadow-md my-2">
                          <button onClick={() => {
                            router.push({
                              pathname: '/editarRutina',
                              query: { rutina: rutina.id }
                            })
                          }} >
                              <h5 className="mb-2 text-2xl font-bold tracking-tight text-gray-900 ">{rutina.nombre}</h5>
                          </button>
                          <p className="mb-3 font-normal text-gray-700">Informacion de la rutina.</p>
                          <button onClick={() => {
                            router.push({
                              pathname: '/editarRutina',
                              query: { rutina: rutina.id }
                            })
                          }} 
                          className="inline-flex items-center px-3 py-2 text-sm font-medium text-center text-white bg-blue-700 rounded-lg hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800">
                              Editar
                              <svg aria-hidden="true" className="w-4 h-4 ml-2 -mr-1" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fillRule="evenodd" d="M10.293 3.293a1 1 0 011.414 0l6 6a1 1 0 010 1.414l-6 6a1 1 0 01-1.414-1.414L14.586 11H3a1 1 0 110-2h11.586l-4.293-4.293a1 1 0 010-1.414z" clip-rule="evenodd"></path></svg>
                          </button>
                      </div>
                      ))
                    )
                }
                <button type="submit" onClick={nuevaRutina} className="btn text-white btn-secondary rounded-lg btn-lg w-fit mx-auto my-4">Nueva Rutina</button>
              </div>
              {/* PAGINACIÃ“N */}
              <div className="flex flex-col items-center mb-2 mt-4">
                <div className="btn-group">
                  {(paginacion == 1) ? "" : <button className="btn btn-outline btn-secondary text-xl lg:btn-lg" onClick={() => {setPaginacion(paginacion - 1)}}>Â«</button>}
                  {((paginacion - 2) <= 0) ? "" : <button className="btn btn-outline btn-secondary lg:btn-lg" onClick={() => {setPaginacion(paginacion - 2)}}>{paginacion - 2}</button>}
                  {((paginacion - 1) <= 0) ? "" : <button className="btn btn-outline btn-secondary lg:btn-lg" onClick={() => {setPaginacion(paginacion - 1)}}>{paginacion - 1}</button>}
                  <button className="btn lg:btn-lg btn-secondary">{paginacion}</button>
                  {(cantidad > (paginacion * 10))? <button className="btn btn-outline btn-secondary lg:btn-lg" onClick={() => {setPaginacion(paginacion + 1)}}>{paginacion + 1}</button> : ""}
                  {(cantidad > ((paginacion+1) * 10))? <button className="btn btn-outline btn-secondary lg:btn-lg" onClick={() => {setPaginacion(paginacion + 2)}}>{paginacion + 2}</button> : ""}
                  {(paginacion >= (cantidad/10))? "" : <button className="btn btn-outline btn-secondary text-xl lg:btn-lg" onClick={() => {setPaginacion(paginacion + 1)}}>Â»</button>}
                </div>
              </div>
            </div> 
            : 
            <div className="mt-12">
              <div className="loader mt-6"></div>
            </div>
          }
        </div>
        <br />
      </main>

      <br />

      <Footer></Footer>
    </div>
  );
}
